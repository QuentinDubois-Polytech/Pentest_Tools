import inspect
import socket
import argparse
import signal
import sys


def main(args: argparse.Namespace) -> None:
    """
    Main function

    :param args: arguments from the command line
    :return: None
    """

    # Create a socket object
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # For the socket to be reusable immediately after closing
    # Source: https://stackoverflow.com/questions/41208720/python-sockets-not-really-closing
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    # Bind the socket to a specific address and port
    server_socket.bind(("0.0.0.0", args.port))

    # Listen for incoming connections (1 connection at a time)
    server_socket.listen(1)

    print(f"Server listening on port {args.port}")

    while True:
        answer_client(server_socket, args.file)
        print("File sent")
        print("Waiting for another client")


def answer_client(server_socket: socket.socket, file: str) -> None:
    """
    Answer to a client by sending a file

    :param server_socket: socket of the server
    :param file: file to send
    :return: None
    """

    # Accept a connection from a client
    client_socket, client_address = server_socket.accept()
    print("Connection accepted from", client_address)

    # Open the file to be sent
    with open(file, "rb") as file:
        # Read the file content
        file_data = file.read()

    # Send the file content to the client
    client_socket.sendall(file_data)
    client_socket.close()


def signal_handler(signum: int, frame: inspect.FrameInfo.frame) -> None:
    """
    Handle the SIGINT signal.
    Close the server socket properly and exit.

    The function is a signal handler.
    https://docs.python.org/3/library/signal.html#signal.signal

    :param signum: number of the signal
    :param frame: frame object of the current thread (see inspect module)
    :return: None
    """
    print("Handling SIGINT (Ctrl+C)")

    # We need to get f_back because the frame given corresponds to the one of the function socket.accept()
    # were the thread is waiting for a client to connect
    # Documentation: https://docs.python.org/3.11/library/inspect.html#inspect.FrameInfo.frame

    try:
        server_socket = frame.f_back.f_locals['server_socket']
        if server_socket:
            print("Closing TCP Socket")
            server_socket.close()
    except KeyError:
        # Not supposed to happen since server_socket is defined in the main function
        pass

    print("Exit")
    sys.exit(0)


def parse_arguments():
    parser = argparse.ArgumentParser(usage="TCP Server that send a file to each client")
    parser.add_argument("-p", "--port", type=int, default=9000, help="Port to the server TCP to listen on")
    parser.add_argument("-f", "--file", type=str, help="File to send", required=True)
    return parser.parse_args()


if __name__ == "__main__":
    # Register the SIGINT handler
    # Working on Linux but not on Windows (need to search why)
    signal.signal(signal.SIGINT, signal_handler)

    args = parse_arguments()
    main(args)
